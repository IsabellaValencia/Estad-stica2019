---
title: "Práctica 1 - Introducción al lenguaje de programacíon en R"
author: "Viviana Romero Alarcon, Estadística - 25374"
output:
  html_document: default
  pdf_document: default
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```


### Objetivos

* Definir qué es R y Rstudio
* Introducir las estructuras y objetos básicos del lenguaje
* Introducir github
* Introducir Markdown


![](Files/r.png){width=100px} ![](Files/RStudio.png){width=100px} ![](Files/github-logo.png){width=100px} ![](Files/hex-rmarkdown.png){width=100px} 

\vspace{20pt}


## ¿Qué es R?

R es un lenguaje de programación orientado a objetos. Este es un lenguaje de interpretación y no de compilación, es decir, no necesitamos generar el código y compilarlo para poder ver el resultado (como por ejemplo en C). Al tiempo que escribimos la instrucción y la ejecutamos, el resultado será visualizado inmediatamente.

Es un lenguaje gratuito y de código abierto, desarrollado por una comunidad activa e interesada en la exploración y tratamiento de datos. Aunque en biología, el uso principal sea estadística, R NO ES SOLO UN PROGRAMA PARA ESTADÍSTICA, es un lenguaje que contiene módulos desarrollados para este objetivo. Dichos módulos son denominados paquetes y cada paquete es construido para un objetivo específico.


\

```{r paquete, echo=TRUE}
packageDescription(pkg = 'lattice',fields = 'Description')


packageDescription(pkg = 'base',fields = 'Description')
```
\
Vaya a [The Comprehensive R Archive Network][1] -> Packages -> Sort by name. Busque los siguientes paquetes y revise la descripción: *raster*, *ape*, *vegan*, *landsat8*. Ahora, podemos entender qué estadística es solo una de las múltiples cosas que podríamos hacer en R.

[1]: https://cran.r-project.org/


## ¿Qué es Rstudio?

Rstudio es un entorno de desarrollo integrado (IDE), es un programa que permite utilizar R de una forma cómoda y amable para el usuario.

![](Files/Rstudio_interf.png)

Para resumir: [infografía][2]


[2]: https://gonzalezgouveia.com/wp-content/uploads/2019/03/infografia-que-es-R.png


## ¿Qué es GitHub?

Es un manejador de código en la nube. Permite a los desarrolladores mantener su código con acceso libre al público (compartir), manteniendo activo el manejador de control de cambios. En realidad, GitHub es una compañía sin ánimo de lucro que presta el servicio de almacenamiento. Existen otros repositorios como GitLab.

Para más información este [blog][3] podría ayudar a despejar dudas con respecto a [GitHub][4]


[3]: https://kinsta.com/es/base-de-conocimiento/que-es-github/
[4]: https://github.com/


# **Comencemos con R**


Lo primero que debemos hacer es descargar e instalar ambos programas, [R][5] y [Rstudio][6], tal como lo hicimos en el curso de coursera.

[5]:https://www.r-project.org/
[6]:https://www.rstudio.com/


### Creando un objeto

Un objeto es una 'caja' que guarda valores o cosas, estas cajas pueden ser creadas, editadas y eliminadas. 
Para crear un objeto debemos tener un símbolo de asignación (operador). En R se pueden usar dos tipos, sin embargo en otros lenguajes ambos, podrían ser definidos como dos cosas distintas.

```{r operadores, echo=TRUE}
 
x = 2
x

y <- 3
y

4 -> z
z
```
**Ejer:** Reasigne 5 a la letra *z*, usando el operador *<-*, ahora, pregunte ¿qué es *z*?

Cuando el objeto existe y es reasignado, el valor anterior es reemplazado. Ese objeto también puede ser reasignado con el resultado de una operación.

```{r reasig, echo=TRUE}
 

z<- 10 + 2

z

z <- 3 + rnorm(1)
z
```
**Ejer:** Revisemos qué es rnorm(1). Empecemos buscando la función en help o ?rnorm
?rnorm

Múltiples secuencias pueden ser guardadas en objetos

```{r seq, echo=TRUE}
# Crear un vector en secuencia de 1 a 10
x <- 1:10
# Ver el vector
x
```

Incluso, podemos hacer operaciones con cada uno de los números de las secuencias

```{r sum, echo=TRUE}
# Sumar 1 a cada número
x + 1

```

**Ejer:** multiplique *x* por 2 y súmele 1 y divídalo por 1.5, ese resultado elévelo al cuadrado. Esto se escribe igual que en una calculadora manual.
((x*2)+1/1.5)^2

### Clases de objetos

Los objetos no solo pueden ser un número u operaciones, los objetos pueden ser de diferentes clases.


R tiene cinco clases básicas de vectores:

*character (letras)
*numeric (números reales)
*integer (números enteros)
*complex (números complejos)
*logical (verdadero/falso o True/False)

```{r Clases, echo=TRUE}
animales <- c('perro','gato','fara')
animales

frases <- 'El gato se comió el fara'
frases

nuemeros <- rep(x = 1:3,3)/1.5
nuemeros

enteros <- seq(from = 1,to = 10,by = 2)
enteros

complejos <- c(2i,5i, 3i)
complejos

logicos <- c(T,F,TRUE,FALSE)
logicos

```
**Ejer:** tome cualquier objeto anterior y pregúntele la clase
class(animales)

También podemos generar vectores con cosas internas de distintos tipos, pero a la final todo el vector tendrá una sola clase

```{r Clases2, echo=TRUE}
# Crear un vector con problemas de clases
prueba <- c(1, "perro", FALSE, "gato", 1.5)
# Ver el vector
prueba
```

**Ejer:** ¿Qué clase tiene el vector?
class(prueba)

Otro tipo de objetos con el que nos podemos encontrar son los vectores que contienen niveles


```{r Clases3, echo=TRUE}
# Creemos un factor con niveles
grupo_altura <- factor(c("mediano", "pequeño", "grande", "muy grande"),
                       levels=c("pequeño", "mediano", "grande", "muy grande"))

# Veamos el factor
grupo_altura
```
\

**Ejer:** Hasta el momento hemos generado varios vectores/objetos/variables, podemos listarlas usando la función
ls() o ls.str(), la cual nos permite, no solo ver las variables, sino el tipo de cada una.
ls(grupo_altura)
### Matrices, DataFrames, Listas


#### Matrices

Es un conjunto de vectores ordenado por filas y columnas; cada elemento interno es del mismo tipo.


```{r Cmatriz, echo=TRUE}
# ¿Cuál es la diferencia entre ambos objetos?

vector1<- seq(1:12)

vector1

matrix1<- matrix(data = 1:12,nrow = 3,ncol = 4)
matrix1

```

Para poder extraer posiciones específicas  de un vector o de una matriz utilizamos *[]*. Si estamos extrayendo de un vector lineal, solo tendremos una dimensión [1]. Si extraemos una posición dentro de una matriz debemos asignar la posición en la columna y en la fila [fila,columna]

```{r matriz2, echo=TRUE}
# El objeto número 6

vector1<- seq(1:12)

vector1[6]

vector1

# el objeto de la fila 2, columna 3
matrix1<- matrix(data = 1:12,nrow = 3,ncol = 4)

matrix1[2,3]

matrix1

```


#### Arreglos

Imaginemos múltiples matrices una detrás de la otra, esto se le conoce como arreglo

```{r matriz3, echo=TRUE}

# el objeto de la fila 2, columna 3
matrix1<- matrix(data = 1:12,nrow = 3,ncol = 4)

matrix1[2,3]

matrix1

# el objeto de la fila 2, columna 3

arreglo<- array(data = 1:12,dim = c(3,4,3))

arreglo[2,4,3]

arreglo

vector1<-rep(1:4,3)
vector2<- seq(2,24,2)
array(data = c(vector1,vector2),dim = c(3,4,2))
```


**Ejer:** Cree un una secuencia que repita los números de 1 a 4, 3 veces y asigne la a un objeto llamado vector1. 
Ahora, cree una secuencia de números pares del 2 al 24 y asignela a un objeto llamado vector2. 
Genere un arreglo con ambos vectores y busque la columna 2, fila 1 de la segunda matriz y para la primera.

vector1<-rep(1:4,3)
vector1
vector2<- seq(2,24,2)
vector2
array<-array(data = c(vector1,vector2),dim = c(3,4,2))
array
```



## Data.Frames

Son similares a las matrices, pero cada columna puede tener diferentes clases. Cada columna tiene un nombre y es posible asignar un nombre a cada fila.


```{r data, echo=T}
# Cargando un dataframe interno

data(iris)


iris

class(iris)

```

Podemos extraer columnas usando el nombre de cada una.


```{r data2, echo=T}
# Longitud del Sepalo

iris$Sepal.Length

# Longitud del Sepalo del individuo 36

iris$Sepal.Length[36]

iris[36,1]

```

**Ejer:**  tome la primera columna  y la segunda, concatenelas con c() ¿Qué encuentra?
Ahora, tome amabas columnas y use la funcion cbind(), asignelo a un objeto llamado minuevatabla.
Haga lo mismo, con las filas del 1:5 y del 10:30, use primero c() y luego rbind() ¿Qué encuentra? 

Busque el archivo suministrado por el profesor, cárguelo a R y revise qué contiene. Extraiga las 5 primeras columnas con las 10 primeras filas, escriba esa nueva matriz como csv en su computador.

getwd()
setwd("Descargas/R/")
datos<-read.csv("Matrix_Multivariate_Mega.csv", header=TRUE, sep="")
datos2<-datos[1:5,1:10]
write.csv(x=datos2, file="Minimatriz.csv")
